{"version":3,"sources":["components/RadioPlayer/AudioPlayer.js","components/RadioPlayer/ChannelInfo.js","components/RadioPlayer/TrackList.js","components/RadioPlayer/index.js","App.js","serviceWorker.js","index.js"],"names":["AudioPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isPlaying","handlePlayButton","bind","assertThisInitialized","audioPlayer","pause","play","setState","prevState","_this2","channel","react_default","a","createElement","className","src","url","controls","ref","input","autoPlay","hidden","role","aria-label","type","onClick","handlePrevChannel","handleNextChannel","Component","ChannelInfo","_ref","logo","alt","name","tags","desc","TrackList","listChannels","selectChannel","map","ch","index","key","style","cursor","RadioPlayer","currentChannelIndex","length","_this$props","tmpConfig","config","_tmpConfig","simpleVersion","showChannelNameOnTitle","currentChannel","document","title","concat","RadioPlayer_AudioPlayer","RadioPlayer_ChannelInfo","RadioPlayer_TrackList","listAudioChannels","require","App","src_components_RadioPlayer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cb422ff.chunk.js","sourcesContent":["/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\n\nclass AudioPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlaying: true,\n    };\n\n    this.handlePlayButton = this.handlePlayButton.bind(this);\n  }\n\n  handlePlayButton() {\n    if (this.state.isPlaying) {\n      this.audioPlayer.pause();\n    } else {\n      this.audioPlayer.play();\n    }\n    this.setState((prevState) => ({\n      isPlaying: !prevState.isPlaying,\n    }));\n  }\n\n  render() {\n    const { channel } = this.props;\n    const { isPlaying } = this.state;\n    return (\n      <div className=\"card text-center audio-player\">\n        <audio src={channel.url[0]} controls ref={input => { this.audioPlayer = input; }} autoPlay hidden />\n        <div className=\"card-body\">\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Audio Control Button\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-info\"\n              onClick={this.props.handlePrevChannel}\n            >\n              Prev\n            </button>\n            <button type=\"button\" className=\"btn btn-success\" onClick={this.handlePlayButton}>{isPlaying ? 'Pause' : 'Play'}</button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-info\"\n              onClick={this.props.handleNextChannel}\n            >\n              Next\n            </button>\n          </div>\n          {isPlaying\n            && (\n              <div className=\"radio-wave pull-right\">\n                <span />\n                <span />\n                <span />\n                <span />\n                <span />\n              </div>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AudioPlayer;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\n\nconst ChannelInfo = ({ channel }) => (\n  <div className=\"card\">\n    <div className=\"card-body\">\n      <div className=\"row\">\n        <div className=\"col-4\">\n          <img className=\"channel-logo\" src={channel.logo} alt=\"Logo Channel\" />\n        </div>\n        <div className=\"col-8\">\n          <h5>{channel.name}</h5>\n          <h6>{channel.tags}</h6>\n          <p>{channel.desc}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default ChannelInfo;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\n\nconst TrackList = ({ listChannels, channel, selectChannel }) => (\n  <div className=\"card\">\n    <div className=\"card-header\">All Channels</div>\n    <ul className=\"list-group list-group-flush\">\n      {listChannels.map((ch, index) => (\n        <li\n          className={\n            ch.name === channel.name ? 'list-group-item active' : 'list-group-item'\n          }\n          key={ch.name}\n          onClick={() => selectChannel(index)}\n          style={{ cursor: 'pointer' }}\n        >\n          {ch.name}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default TrackList;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\nimport './bootstrap.css';\nimport './index.css';\nimport AudioPlayer from './AudioPlayer';\nimport ChannelInfo from './ChannelInfo';\nimport TrackList from './TrackList';\n\nclass RadioPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentChannelIndex: 0,\n    };\n\n    this.handleNextChannel = this.handleNextChannel.bind(this);\n    this.handlePrevChannel = this.handlePrevChannel.bind(this);\n    this.selectChannel = this.selectChannel.bind(this);\n    this.handlePlayButton = this.handlePlayButton.bind(this);\n  }\n\n  selectChannel(index) {\n    this.setState({ currentChannelIndex: index });\n  }\n\n  handlePrevChannel() {\n    this.setState((prevState) => ({\n      currentChannelIndex:\n        prevState.currentChannelIndex === 0 ? 0 : prevState.currentChannelIndex - 1,\n    }));\n  }\n\n  handleNextChannel() {\n    this.setState((prevState) => ({\n      currentChannelIndex:\n        prevState.currentChannelIndex === this.props.listChannels.length - 1\n          ? this.props.listChannels.length - 1\n          : prevState.currentChannelIndex + 1,\n    }));\n  }\n\n  handlePlayButton() {\n    if (this.state.isPlaying) {\n      this.audioPlayer.pause();\n    } else {\n      this.audioPlayer.play();\n    }\n    this.setState((prevState) => ({\n      isPlaying: !prevState.isPlaying,\n    }));\n  }\n\n  render() {\n    const { listChannels, config } = this.props;\n    let tmpConfig = config;\n    if (!tmpConfig) {\n      tmpConfig = {};\n    }\n    const { simpleVersion, showChannelNameOnTitle } = tmpConfig;\n    const currentChannel = listChannels[this.state.currentChannelIndex];\n    if (showChannelNameOnTitle) {\n      document.title = `Radio Station - ${currentChannel.name}`;\n    }\n    return (\n      <div>\n        <AudioPlayer\n          channel={currentChannel}\n          handleNextChannel={this.handleNextChannel}\n          handlePrevChannel={this.handlePrevChannel}\n        />\n        {simpleVersion\n        && (\n          <div>\n            <ChannelInfo channel={currentChannel} />\n            <TrackList\n              listChannels={listChannels}\n              channel={currentChannel}\n              selectChannel={this.selectChannel}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RadioPlayer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport RadioPlayer from './components/RadioPlayer/index';\nconst listAudioChannels = require('./listAudioChannels');\n\nclass App extends Component {\n  render() {\n    document.title = 'Radio Station';\n    const audioPlayerConfig = {\n      showChannelNameOnTitle : true,\n      simpleVersion : true,\n    };\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>Radio Station</h1>\n        </div>\n        <RadioPlayer\n          listChannels={listAudioChannels}\n          config={audioPlayerConfig}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}