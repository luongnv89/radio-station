{"version":3,"sources":["utils.js","components/RadioPlayer/svg/play-btn.svg","components/RadioPlayer/svg/pause-btn.svg","components/RadioPlayer/svg/loading-btn.svg","components/RadioPlayer/svg/error-btn.svg","components/RadioPlayer/AudioPlayer.js","components/RadioPlayer/MediaInfo.js","components/RadioPlayer/MediaList.js","components/RadioPlayer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getQueryValue","key","queryString","window","location","search","replace","queries","split","index","length","queryPaths","decodeURIComponent","getHashValue","hash","setHashValue","value","encodeURIComponent","ActionButtons","paused","PlayButtonIcon","playing","PauseButtonIcon","loading","LoadingButtonIcon","error","ErrorButtonIcon","AudioPlayer","props","useState","status","setStatus","audioPlayer","console","log","className","src","channel","url","controls","ref","input","onPlay","onPause","onError","handlePlayerError","hidden","autoPlay","onClick","pause","play","alt","MediaInfo","logo","name","tags","desc","MediaList","listChannels","selectChannel","map","ch","require","RadioPlayer","showList","setShowList","currentChannelIndex","setCurrentChannelIndex","theme","apTheme","oldBodyClassName","document","body","getAttribute","indexOf","newBodyClassName","setAttribute","currentChannel","title","useEffect","defaultChannelIndex","listAudioChannels","App","setTheme","channelName","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1766efed.chunk.js","sourcesContent":["const getQueryValue = (key) => {\n  const queryString = window.location.search.replace('?','');\n  if (!queryString) return null;\n  const queries = queryString.split('&');\n  for (let index = 0; index < queries.length; index++) {\n    const queryPaths = queries[index].split('=');\n    if (queryPaths[0]===key){\n      return decodeURIComponent(queryPaths[1]);\n    }\n  }\n  return null;\n};\n\nconst getHashValue = () => {\n  return decodeURIComponent(window.location.hash).replace('#','');\n};\n\nconst setHashValue = (value) => {\n  window.location.hash = encodeURIComponent(value);\n};\n\nmodule.exports = {\n  getQueryValue,\n  getHashValue,\n  setHashValue,\n}","module.exports = __webpack_public_path__ + \"static/media/play-btn.4e85f443.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause-btn.0403903f.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading-btn.9650d3af.svg\";","module.exports = __webpack_public_path__ + \"static/media/error-btn.9b30d5be.svg\";","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useState } from 'react';\nimport PlayButtonIcon from './svg/play-btn.svg';\nimport PauseButtonIcon from './svg/pause-btn.svg';\nimport LoadingButtonIcon from './svg/loading-btn.svg';\nimport ErrorButtonIcon from './svg/error-btn.svg';\n\nconst ActionButtons = {\n  paused: PlayButtonIcon,\n  playing: PauseButtonIcon,\n  loading: LoadingButtonIcon,\n  error: ErrorButtonIcon,\n};\n\nconst AudioPlayer = props => {\n  const [status, setStatus] = useState('loading');\n\n  let audioPlayer = null;\n\n  const _onPlay = () => {\n    setStatus('playing');\n  }\n\n  const _onPause = () => {\n    setStatus('paused');\n  }\n\n  const _onError = (error) => {\n    // console.error('ERROR: ...: ',error);\n    props.handlePlayerError(error);\n  }\n\n  const handlePlayButton = () => {\n    console.log('handle playing button...', status);\n    if (status === 'playing') {\n      audioPlayer.pause();\n    } else if (status === 'paused') {\n      audioPlayer.play();\n      setStatus('loading');\n    }\n  }\n\n  console.log(status);\n\n  return (\n    <div className=\"audio-player\">\n        <audio src={props.channel.url[0]} controls ref={input => { audioPlayer = input; }} onPlay={_onPlay} onPause={_onPause} onError={_onError} hidden autoPlay/>\n        <img className={`audio-player-btn ${status}`} src={ActionButtons[status]} onClick={handlePlayButton} alt=\"Click to play/pause the audio\" />\n      </div>\n  )\n}\n\nexport default AudioPlayer;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from \"react\";\n\nconst MediaInfo = ({ channel }) => (\n  <div className=\"media-info row\">\n    <div className=\"col-2\">\n      <img className=\"media-logo\" src={channel.logo} alt=\"Logo Channel\" />\n    </div>\n    <div className=\"media-body col-8\">\n      <div className=\"media-title\">\n        <h3>{channel.name}</h3>\n      </div>\n      <div className=\"media-tags\">\n        <strong>{channel.tags}</strong>\n      </div>\n      <div className=\"media-description\">\n        <p>{channel.desc}</p>\n      </div>\n    </div>\n  </div>\n);\n\nexport default MediaInfo;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\n\nconst MediaList = ({ listChannels, channel, selectChannel }) => (\n  <div className=\"ap-media-list\">\n    <div className=\"ap-media-list-header\"><h2>All Channels</h2></div>\n    <ul className=\"ap-list-media\">\n      {listChannels.map((ch, index) => (\n        <li\n          className={\n            ch.name === channel.name ? 'media-item active' : 'media-item'\n          }\n          key={ch.name}\n          onClick={() => selectChannel(index)}\n        >\n          {ch.logo && (<img src={ch.logo} alt=\"Media Logo\" className=\"media-item-logo\" />)} <span>{ch.name}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default MediaList;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport AudioPlayer from \"./AudioPlayer\";\nimport MediaInfo from \"./MediaInfo\";\nimport MediaList from \"./MediaList\";\nconst { setHashValue } = require('../../utils');\n\nconst RadioPlayer = props => {\n  const [showList, setShowList] = useState(false);\n  const [currentChannelIndex, setCurrentChannelIndex] = useState(0);\n  const { listChannels, theme } = props;\n  let apTheme = theme ? theme : \"dark\";\n  let oldBodyClassName = document.body.getAttribute(\"class\")\n    ? document.body.getAttribute(\"class\")\n    : \"\";\n  if (oldBodyClassName.indexOf(apTheme) === -1) {\n    oldBodyClassName = oldBodyClassName\n      .replace(\" dark\", \"\")\n      .replace(\" light\", \"\");\n    const newBodyClassName = oldBodyClassName + \" \" + apTheme;\n    document.body.setAttribute(\"class\", newBodyClassName);\n  }\n  const currentChannel = listChannels[currentChannelIndex];\n  document.title = `Radio Station - ${currentChannel.name}`;\n  setHashValue(currentChannel.name);\n\n  useEffect(() => {\n    setCurrentChannelIndex(props.defaultChannelIndex);\n  }, [props.defaultChannelIndex]);\n\n  const selectChannel = index => {\n    setCurrentChannelIndex(index);\n    setShowList(false);\n  };\n\n  const handleShowListBtn = () => {\n    setShowList(!showList);\n  };\n  const handlePlayerError = () => {\n    console.error(`Cannot play the channel: ${currentChannel.name}`);\n    console.log('Going to try the next channel');\n    setCurrentChannelIndex(currentChannelIndex + 1);\n    // if (props.switchChannel) props.switchChannel(currentChannelIndex + 1);\n  }\n\n  console.log('Going to play current channel: ', currentChannel.name);\n\n  return (\n    <div className={`RadioPlayer ${apTheme}`}>\n      <div className=\"player-bar\">\n        <AudioPlayer\n          channel={currentChannel}\n          handlePlayerError={handlePlayerError}\n        />\n        <button className=\"show-list-btn\" onClick={handleShowListBtn}>\n          {showList ? \"Back\" : \"Switch Channel\"}\n        </button>\n      </div>\n\n      {showList ? (\n        <MediaList\n          listChannels={listChannels}\n          channel={currentChannel}\n          selectChannel={selectChannel}\n        />\n      ) : (\n        <MediaInfo channel={currentChannel}/>\n      )}\n    </div>\n  );\n};\n\nexport default RadioPlayer;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport RadioPlayer from \"./components/RadioPlayer/index\";\nconst listAudioChannels = require(\"./listAudioChannels\");\nconst { getHashValue } = require(\"./utils\");\n\nconst App = props => {\n  const [theme, setTheme] = useState(\"dark\");\n\n  const switchTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n  document.title = \"Radio Station\";\n\n  // Get current chanel index\n  let defaultChannelIndex = 0;\n  const channelName = getHashValue();\n\n  if (channelName) {\n    for (let index = 0; index < listAudioChannels.length; index++) {\n      const ch = listAudioChannels[index];\n      if (ch.name === channelName) {\n        defaultChannelIndex = index;\n        break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1 onClick={switchTheme}>Radio Station</h1>\n      </div>\n      <RadioPlayer\n        listChannels={listAudioChannels}\n        theme={theme}\n        defaultChannelIndex={defaultChannelIndex}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}