{"version":3,"sources":["components/RadioPlayer/play-btn.svg","components/RadioPlayer/pause-btn.svg","components/RadioPlayer/AudioPlayer.js","components/RadioPlayer/MediaInfo.js","components/RadioPlayer/MediaList.js","components/RadioPlayer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AudioPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isPlaying","handlePlayButton","bind","assertThisInitialized","audioPlayer","pause","play","setState","prevState","_this2","channel","btnIcon","PauseButtonIcon","PlayButtonIcon","btnPlayClassName","react_default","a","createElement","className","src","url","controls","ref","input","autoPlay","hidden","onClick","alt","Component","MediaInfo","_ref","logo","name","tags","desc","MediaList","listChannels","selectChannel","map","ch","index","key","RadioPlayer","currentChannelIndex","showList","handleShowListBtn","currentChannel","document","title","concat","RadioPlayer_AudioPlayer","RadioPlayer_MediaList","RadioPlayer_MediaInfo","listAudioChannels","require","App","src_components_RadioPlayer","config","showChannelNameOnTitle","simpleVersion","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c4fef6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play-btn.4e85f443.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause-btn.0403903f.svg\";","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\nimport PlayButtonIcon from './play-btn.svg';\nimport PauseButtonIcon from './pause-btn.svg';\n\nclass AudioPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlaying: true,\n    };\n\n    this.handlePlayButton = this.handlePlayButton.bind(this);\n  }\n\n  handlePlayButton() {\n    if (this.state.isPlaying) {\n      this.audioPlayer.pause();\n    } else {\n      this.audioPlayer.play();\n    }\n    this.setState((prevState) => ({\n      isPlaying: !prevState.isPlaying,\n    }));\n  }\n\n  render() {\n    const { channel } = this.props;\n    const { isPlaying } = this.state;\n    const btnIcon = isPlaying ? PauseButtonIcon : PlayButtonIcon;\n    const btnPlayClassName = isPlaying ? 'audio-player-btn active' : 'audio-player-btn';\n    return (\n      <div className=\"audio-player\">\n        <audio src={channel.url[0]} controls ref={input => { this.audioPlayer = input; }} autoPlay hidden />\n        <img className={btnPlayClassName} src={btnIcon} onClick={this.handlePlayButton} alt=\"Click to play/pause the audio\"/>\n      </div>\n    );\n  }\n}\n\nexport default AudioPlayer;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from \"react\";\n\nconst MediaInfo = ({ channel }) => (\n  <div className=\"media-info row\">\n    <div className=\"col-2\">\n      <img className=\"media-logo\" src={channel.logo} alt=\"Logo Channel\" />\n    </div>\n    <div className=\"media-body col-8\">\n      <div className=\"media-title\">\n        <h3>{channel.name}</h3>\n      </div>\n      <div className=\"media-tags\">\n        <strong>{channel.tags}</strong>\n      </div>\n      <div className=\"media-description\">\n        <p>{channel.desc}</p>\n      </div>\n    </div>\n  </div>\n);\n\nexport default MediaInfo;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\n\nconst MediaList = ({ listChannels, channel, selectChannel }) => (\n  <div className=\"ap-media-list\">\n    <div className=\"ap-media-list-header\"><h2>All Channels</h2></div>\n    <ul className=\"ap-list-media\">\n      {listChannels.map((ch, index) => (\n        <li\n          className={\n            ch.name === channel.name ? 'media-item active' : 'media-item'\n          }\n          key={ch.name}\n          onClick={() => selectChannel(index)}\n        >\n          {ch.logo && (<img src={ch.logo} alt=\"Media Logo\" className=\"media-item-logo\" />)} <span>{ch.name}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default MediaList;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\nimport './index.css';\nimport AudioPlayer from './AudioPlayer';\nimport MediaInfo from './MediaInfo';\nimport MediaList from './MediaList';\n\nclass RadioPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentChannelIndex: 0,\n      showList: false,\n    };\n\n    this.selectChannel = this.selectChannel.bind(this);\n    this.handleShowListBtn = this.handleShowListBtn.bind(this);\n  }\n\n  selectChannel(index) {\n    this.setState({ currentChannelIndex: index });\n  }\n\n  handleShowListBtn() {\n    this.setState((prevState) => ({\n      showList: !prevState.showList,\n    }));\n  }\n\n  render() {\n    const { listChannels } = this.props;\n    const currentChannel = listChannels[this.state.currentChannelIndex];\n    document.title = `Radio Station - ${currentChannel.name}`;\n    return (\n      <div className=\"RadioPlayer\">\n        <div className=\"player-bar\">\n          <AudioPlayer channel={currentChannel} />\n          <button className=\"show-list-btn\" onClick={this.handleShowListBtn}>{this.state.showList ? 'Back' : 'Switch Channel'}</button>\n        </div>\n        {this.state.showList ? (<MediaList\n              listChannels={listChannels}\n              channel={currentChannel}\n              selectChannel={this.selectChannel}\n            />) : (<MediaInfo channel={currentChannel} />)}\n      </div>\n    );\n  }\n}\n\nexport default RadioPlayer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport RadioPlayer from './components/RadioPlayer/index';\nconst listAudioChannels = require('./listAudioChannels');\n\nclass App extends Component {\n  render() {\n    document.title = 'Radio Station';\n    const audioPlayerConfig = {\n      showChannelNameOnTitle : true,\n      simpleVersion : true,\n    };\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>Radio Station</h1>\n        </div>\n        <RadioPlayer\n          listChannels={listAudioChannels}\n          config={audioPlayerConfig}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}