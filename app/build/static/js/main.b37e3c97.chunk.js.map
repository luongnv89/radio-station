{"version":3,"sources":["components/RadioPlayer/svg/play-btn.svg","components/RadioPlayer/svg/pause-btn.svg","components/RadioPlayer/svg/loading-btn.svg","components/RadioPlayer/svg/error-btn.svg","utils.js","components/RadioPlayer/AudioPlayer.js","components/RadioPlayer/MediaInfo.js","components/RadioPlayer/MediaList.js","components/RadioPlayer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getQueryValue","key","queryString","window","location","search","replace","queries","split","index","length","queryPaths","decodeURIComponent","getHashValue","hash","setHashValue","value","encodeURIComponent","ActionButtons","paused","PlayButtonIcon","playing","PauseButtonIcon","loading","LoadingButtonIcon","error","ErrorButtonIcon","AudioPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerStatus","handlePlayButton","bind","assertThisInitialized","_onPlay","_onPause","_onError","_this2","setState","setTimeout","newProps","channel","console","audioPlayer","pause","play","_this3","btnIcon","react_default","a","createElement","className","src","url","controls","ref","input","onPlay","onPause","onError","hidden","autoPlay","concat","onClick","alt","Component","MediaInfo","_ref","logo","name","tags","desc","MediaList","listChannels","selectChannel","map","ch","RadioPlayer","currentChannelIndex","defaultChannelIndex","showList","handleShowListBtn","switchChannel","prevState","_this$props","theme","apTheme","oldBodyClassName","document","body","getAttribute","indexOf","newBodyClassName","setAttribute","currentChannel","title","RadioPlayer_AudioPlayer","RadioPlayer_MediaList","RadioPlayer_MediaInfo","listAudioChannels","require","App","switchTheme","channelIndex","channelName","src_components_RadioPlayer","config","showChannelNameOnTitle","simpleVersion","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b37e3c97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play-btn.4e85f443.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause-btn.0403903f.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading-btn.9650d3af.svg\";","module.exports = __webpack_public_path__ + \"static/media/error-btn.9b30d5be.svg\";","const getQueryValue = (key) => {\n  const queryString = window.location.search.replace('?','');\n  if (!queryString) return null;\n  const queries = queryString.split('&');\n  for (let index = 0; index < queries.length; index++) {\n    const queryPaths = queries[index].split('=');\n    if (queryPaths[0]===key){\n      return decodeURIComponent(queryPaths[1]);\n    }\n  }\n  return null;\n};\n\nconst getHashValue = () => {\n  return decodeURIComponent(window.location.hash).replace('#','');\n};\n\nconst setHashValue = (value) => {\n  window.location.hash = encodeURIComponent(value);\n};\n\nmodule.exports = {\n  getQueryValue,\n  getHashValue,\n  setHashValue,\n}","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\nimport PlayButtonIcon from './svg/play-btn.svg';\nimport PauseButtonIcon from './svg/pause-btn.svg';\nimport LoadingButtonIcon from './svg/loading-btn.svg';\nimport ErrorButtonIcon from './svg/error-btn.svg';\n\nconst ActionButtons = {\n  paused: PlayButtonIcon,\n  playing: PauseButtonIcon,\n  loading: LoadingButtonIcon,\n  error: ErrorButtonIcon,\n};\n\n\nclass AudioPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerStatus: 'paused',\n      error: '',\n    };\n\n    this.handlePlayButton = this.handlePlayButton.bind(this);\n    this._onPlay = this._onPlay.bind(this);\n    this._onPause = this._onPause.bind(this);\n    this._onError = this._onError.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      playerStatus: 'loading',\n    });\n    setTimeout(() => {\n      if (this.state.playerStatus === 'loading') {\n        this.setState({\n          playerStatus: 'paused',\n        });\n      }\n    }, 5000);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.channel !== this.props.channel) {\n      this.setState({\n        playerStatus: 'loading',\n      });\n    }\n  }\n\n  _onPlay() {\n    this.setState({\n      playerStatus: 'playing',\n    });\n  }\n\n  _onPause() {\n    this.setState({\n      playerStatus: 'paused',\n    });\n  }\n\n  _onError(error) {\n    console.error(error);\n    this.setState({\n      playerStatus: 'error',\n    });\n  }\n\n  handlePlayButton() {\n    if (this.state.playerStatus === 'playing') {\n      this.audioPlayer.pause();\n    } else if (this.state.playerStatus === 'paused') {\n      this.audioPlayer.play();\n      this.setState({\n        playerStatus: 'loading',\n      });\n    }\n  }\n\n  render() {\n    const { channel } = this.props;\n    const { playerStatus } = this.state;\n    const btnIcon = ActionButtons[playerStatus];\n\n    // TODO: handle audio player events by adding onEvent={this.onEvent}\n    return (\n      <div className=\"audio-player\">\n        <audio src={channel.url[0]} controls ref={input => { this.audioPlayer = input; }} onPlay={this._onPlay} onPause={this._onPause} onError={this._onError} hidden autoPlay/>\n        <img className={`audio-player-btn ${playerStatus}`} src={btnIcon} onClick={this.handlePlayButton} alt=\"Click to play/pause the audio\" />\n      </div>\n    );\n  }\n}\n\nexport default AudioPlayer;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from \"react\";\n\nconst MediaInfo = ({ channel }) => (\n  <div className=\"media-info row\">\n    <div className=\"col-2\">\n      <img className=\"media-logo\" src={channel.logo} alt=\"Logo Channel\" />\n    </div>\n    <div className=\"media-body col-8\">\n      <div className=\"media-title\">\n        <h3>{channel.name}</h3>\n      </div>\n      <div className=\"media-tags\">\n        <strong>{channel.tags}</strong>\n      </div>\n      <div className=\"media-description\">\n        <p>{channel.desc}</p>\n      </div>\n    </div>\n  </div>\n);\n\nexport default MediaInfo;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\n\nconst MediaList = ({ listChannels, channel, selectChannel }) => (\n  <div className=\"ap-media-list\">\n    <div className=\"ap-media-list-header\"><h2>All Channels</h2></div>\n    <ul className=\"ap-list-media\">\n      {listChannels.map((ch, index) => (\n        <li\n          className={\n            ch.name === channel.name ? 'media-item active' : 'media-item'\n          }\n          key={ch.name}\n          onClick={() => selectChannel(index)}\n        >\n          {ch.logo && (<img src={ch.logo} alt=\"Media Logo\" className=\"media-item-logo\" />)} <span>{ch.name}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default MediaList;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { Component } from 'react';\nimport './index.css';\nimport AudioPlayer from './AudioPlayer';\nimport MediaInfo from './MediaInfo';\nimport MediaList from './MediaList';\n\nclass RadioPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentChannelIndex: props.defaultChannelIndex,\n      showList: false,\n    };\n\n    this.selectChannel = this.selectChannel.bind(this);\n    this.handleShowListBtn = this.handleShowListBtn.bind(this);\n  }\n\n  selectChannel(index) {\n    this.setState({ currentChannelIndex: index, showList: false });\n    if (this.props.switchChannel) this.props.switchChannel(index);\n  }\n\n  handleShowListBtn() {\n    this.setState((prevState) => ({\n      showList: !prevState.showList,\n    }));\n  }\n\n  render() {\n    const { listChannels, theme } = this.props;\n    let apTheme = theme ? theme : 'dark';\n    let oldBodyClassName = document.body.getAttribute('class') ? document.body.getAttribute('class') : '';\n    if (oldBodyClassName.indexOf(apTheme) === -1) {\n      oldBodyClassName = oldBodyClassName.replace(' dark','').replace(' light','');\n      const newBodyClassName = oldBodyClassName + ' ' + apTheme;\n      document.body.setAttribute('class', newBodyClassName);\n    }\n    const currentChannel = listChannels[this.state.currentChannelIndex];\n    document.title = `Radio Station - ${currentChannel.name}`;\n    return (\n      <div className={`RadioPlayer ${apTheme}`}>\n        <div className=\"player-bar\">\n          <AudioPlayer channel={currentChannel} />\n          <button className=\"show-list-btn\" onClick={this.handleShowListBtn}>{this.state.showList ? 'Back' : 'Switch Channel'}</button>\n        </div>\n        {this.state.showList ? (<MediaList\n              listChannels={listChannels}\n              channel={currentChannel}\n              selectChannel={this.selectChannel}\n            />) : (<MediaInfo channel={currentChannel} />)}\n      </div>\n    );\n  }\n}\n\nexport default RadioPlayer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport RadioPlayer from './components/RadioPlayer/index';\nconst listAudioChannels = require('./listAudioChannels');\nconst { getHashValue, setHashValue } = require('./utils');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: 'dark',\n    };\n    this.switchTheme = this.switchTheme.bind(this);\n    this.switchChannel = this.switchChannel.bind(this);\n  }\n\n  switchChannel (channelIndex) {\n    setHashValue(listAudioChannels[channelIndex].name);\n  }\n\n  switchTheme() {\n    this.setState((prevState) => ({\n      theme: prevState.theme === 'dark' ? 'light' : 'dark',\n    }));\n  }\n  render() {\n    document.title = 'Radio Station';\n    const audioPlayerConfig = {\n      showChannelNameOnTitle : true,\n      simpleVersion : true,\n    };\n    let defaultChannelIndex = 0;\n    const channelName = getHashValue();\n    if (channelName) {\n      for (let index = 0; index < listAudioChannels.length; index++) {\n        const ch = listAudioChannels[index];\n        if (ch.name === channelName){\n          defaultChannelIndex = index;\n          break;\n        }\n      }\n    }\n\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1 onClick={this.switchTheme}>Radio Station</h1>\n        </div>\n        <RadioPlayer\n          listChannels={listAudioChannels}\n          config={audioPlayerConfig}\n          theme={this.state.theme}\n          defaultChannelIndex={defaultChannelIndex}\n          switchChannel={this.switchChannel}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}