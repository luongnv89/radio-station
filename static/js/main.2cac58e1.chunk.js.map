{"version":3,"sources":["logo.svg","components/RadioPlayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","RadioPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentChannelIndex","handleNextChannel","bind","assertThisInitialized","handlePrevChannel","selectChannel","index","setState","prevState","_this2","listChannels","length","_this3","currentChannel","react_default","a","createElement","style","padding","className","src","logo","alt","width","name","textAlign","desc","url","autoPlay","controls","onClick","map","ch","key","cursor","Component","listAudioChannels","require","App","components_RadioPlayer","Boolean","window","location","hostname","match","jQuery","Popper","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cac58e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass RadioPlayer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentChannelIndex: 0,\n    }\n\n    this.handleNextChannel = this.handleNextChannel.bind(this);\n    this.handlePrevChannel = this.handlePrevChannel.bind(this);\n    this.selectChannel = this.selectChannel.bind(this);\n  }\n\n  selectChannel ( index ) {\n    this.setState({currentChannelIndex: index});\n  }\n\n  handlePrevChannel(){\n    this.setState((prevState) => ({\n      currentChannelIndex: prevState.currentChannelIndex === 0 ? 0 : (prevState.currentChannelIndex - 1),\n    }));\n  }\n\n  handleNextChannel(){\n    this.setState((prevState) => ({\n      currentChannelIndex: prevState.currentChannelIndex === (this.props.listChannels.length - 1) ? (this.props.listChannels.length - 1)  : (prevState.currentChannelIndex + 1),\n    }));\n  }\n\n  render() {\n    const { listChannels } = this.props;\n    const currentChannel= listChannels[this.state.currentChannelIndex];\n    return (\n      <div style={{padding: '30px'}}>\n        <div className=\"row\">\n          <div className=\"col-4\">\n            <img src={currentChannel.logo} alt=\"Channel logo\" style={{width: '100%'}}/>\n          </div>\n          <div className=\"col-8\">\n            <label className=\"text-success\">Channel: {currentChannel.name}</label>\n            <p style={{textAlign:\"justify\"}}>{currentChannel.desc}</p>\n          </div>\n        </div>\n        <audio\n          src={currentChannel.url[0]}\n          autoPlay\n          controls\n        />\n        <div className=\"row\">\n          <button className=\"btn btn-outline-primary col\" onClick={this.handlePrevChannel}>Prev</button>\n          <button className=\"btn btn-outline-success col\" onClick={this.handleNextChannel}>Next</button>\n        </div>\n        <ul className=\"list-group\">\n          {listChannels.map((ch, index) =>\n            (<li\n              className={ch.name === currentChannel.name ? \"list-group-item active\" : \"list-group-item\"}\n              key={ch.name}\n              onClick={()=>this.selectChannel(index)}\n              style={{cursor:\"pointer\"}}\n              >\n              {ch.name}\n              </li>))}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default RadioPlayer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RadioPlayer from './components/RadioPlayer';\nconst listAudioChannels = require('./listAudioChannels');\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <RadioPlayer listChannels={listAudioChannels}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-material-design/dist/css/bootstrap-material-design.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import $ from \"jquery\";\nwindow.jQuery = require('jquery/dist/jquery');\nwindow.Popper = require('popper.js/dist/umd/popper');\nrequire('bootstrap/dist/js/bootstrap');\nrequire('bootstrap-material-design');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}